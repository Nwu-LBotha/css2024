    1  ssh-keygen.exe 
    2  vim ~/.ssh/id_rsa.pub 
    3  ssh lbotha@lengau.chpc.ac.za
    4  ssh lbotha@lengau.chpc.ac.za
    5  #! /bin/sh
    6  export DOCSBASENAME="gibbs2"
    7  export STYLESHEET="--stylesheet=RST2.tex"
    8  # Options:
    9  # --no-generator          Do not include a generator credit.
   10  # --date, -d              Include the date at the end of the document (UTC).
   11  # --toc-top-backlinks     Enable backlinks from section headers to the top of
   12  #                         the table of contents.
   13  # --footnote-backlinks    Enable backlinks from footnotes and citations to their
   14  #                         references.  This is the default.
   15  # --section-numbering     Enable Docutils section numbering (default: enabled).
   16  # --tab-width=<width>     Set number of spaces for tab expansion (default 8).
   17  # --documentclass=DOCUMENTCLASS
   18  #                         Specify documentclass.  Default is "article".
   19  # --documentoptions=DOCUMENTOPTIONS
   20  #                         Specify document options.  Multiple options can be
   21  #                         given, separated by commas.  Default is
   22  #                         "10pt,a4paper".
   23  # --use-latex-footnotes   Use LaTeX footnotes. LaTeX supports only numbered
   24  #                         footnotes (does it?). Default: no, uses figures.
   25  # --use-latex-citations   Use LaTeX citations. Default: no, uses figures
   26  #                         which might get mixed with images. 
   27  # --footnote-references=<format>
   28  #                         Format for footnote references: one of "superscript"
   29  #                         or "brackets".  Default is "superscript".
   30  # --stylesheet=<file>     Specify a stylesheet file. The file will be "input" by
   31  #                         latex in the document header.  Default is no
   32  #                         stylesheet ("").  Overrides --stylesheet-path.
   33  # --use-verbatim-when-possible
   34  #                         When possibile, use verbatim for literal-blocks.
   35  #                         Default is to always use the mbox environment.
   36  # --table-style=<format>  Table style. "standard" with horizontal and vertical
   37  #                         lines, "booktabs" (LaTeX booktabs style) only
   38  #                         horizontal lines above and below the table and below
   39  #                         the header or "nolines".  Default: "standard"
   40  # --font-encoding=FONT_ENCODING
   41  #                         LaTeX font encoding. Possible values are "T1", "OT1",
   42  #                         "" or some other fontenc option. The font encoding
   43  #                         influences available symbols, e.g. "<<" as one
   44  #                         character. Default is "" which leads to package "ae"
   45  #                         (a T1 emulation using CM fonts).
   46  ##rst2latex --language=en --report=4 --use-latex-footnotes --section-numbering \
   47  ##  --section-numbering ${STYLESHEET} --use-verbatim-when-possible \
   48  ##  --graphicx-option=pdftex --font-encoding=T1 \
   49  ##  ${DOCSBASENAME}.txt ${DOCSBASENAME}.tex
   50  rst2latex --language=en --report=4 --use-latex-citations --footnote-backlinks   --section-numbering ${STYLESHEET} --use-verbatim-when-possible   --graphicx-option=pdftex --font-encoding=T1   ${DOCSBASENAME}.txt ${DOCSBASENAME}.tex
   51  tolistings.awk ${DOCSBASENAME}.tex > pp.tex
   52  mv pp.tex ${DOCSBASENAME}.tex
   53  pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex
   54  while grep 'Rerun to get' ${DOCSBASENAME}.log > /dev/null; do     pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex; done
   55  pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex
   56  #! /bin/bash
   57  # Use:
   58  #   makemake.sh
   59  #
   60  # Assumes files and modules share name and general common sense.
   61  awk '
   62  { 
   63      if(FILENAME != f[fs]){
   64  	fs++
   65  	f[fs] = FILENAME
   66      }
   67  }
   68  /^( |\t)*module( |\t)*[^ \t\n]*( |\t)*$/{
   69      ismodule[fs] = 1
   70  }
   71  /^( |\t)*use( |\t)*[^ \t\n]*/{
   72      nm = tolower($2)
   73      uses[nm]++
   74      use[nm,uses[nm]] = fs
   75  }
   76  END{
   77      make="Makefile"
   78      print "# This file is automatically generated by makemake.awk " > make
   79      print "# Set compiler and options in Makefile.inc" > make
   80      print "include Makefile.inc" > make
   81      print "" > make
   82      print "BINS=gibbs2" > make
   83      print "BINS_dbg=gibbs2_dbg" > make
   84      str="OBJS="
   85      for (i=1;i<=fs;i++){
   86  	sub(/\..+/,"",f[i])
   87  	str=sprintf("%s %s.o",str,f[i])
   88      }
   89      print str > make
   90      print "LIBS=slatec/libslatec.a minpack/libminpack.a pppack/libpppack.a" > make
   91      print "INCLUDE=" > make
   92      print "" > make
   93      print "%.o: %.f90" > make
   94      print "	$(FC) -c $(FCFLAGS) $(INCLUDE) -o $@ $<" > make
   95      print "" > make
   96      print "%.o: %.f" > make
   97      print "	$(FC) -c $(FCFLAGS) $(INCLUDE) -o $@ $<" > make
   98      print "" > make
   99      print "%.mod: %.o" > make
  100      print "	@if [ ! -f $@ ]; then rm $< ; $(MAKE) $< ; fi" > make
  101      print "" > make
  102      print "# General targets" > make
  103      print "" > make
  104      print "all: $(BINS)" > make
  105      print "" > make
  106      print "debug: " > make
  107      print "	DEBUG=1 $(MAKE) $(BINS_dbg)" > make
  108      print "" > make
  109      print "clean:" > make
  110      print "	rm -f core *.mod *.o " > make
  111      print "" > make
  112      print "mrproper:" > make
  113      print "	rm -f core *.mod *.o $(BINS) $(BINS_dbg)" > make
  114      print "" > make
  115      print "gibbs2: $(OBJS)" > make
  116      print "	$(FC) -o gibbs2 $(LDFLAGS) $(OBJS) $(LIBS)" > make
  117      print "" > make
  118      print "gibbs2_dbg: $(OBJS)" > make
  119      print "	$(FC) -o gibbs2_dbg $(LDFLAGS) $(OBJS) $(LIBS)" > make
  120      print "" > make
  121      print "dummy: " > make
  122      print "	@true" > make
  123      print "" > make
  124      print "# Object dependencies" > make
  125      for (i=1;i<=fs;i++){
  126  	if (ismodule[i] && uses[tolower(f[i])]){
  127  	    str = sprintf(": %s.mod",f[i])
  128  	    for (j=1;j<=uses[tolower(f[i])];j++)
  129  		str = sprintf("%s.o %s",f[use[f[i],j]],str)
  130  	    print str > make
  131  	}
  132      }
  133  }
  134  ' *.f90
  135  #! /bin/sh
  136  export DOCSBASENAME="gibbs2"
  137  export STYLESHEET="--stylesheet=RST2.tex"
  138  # Options:
  139  # --no-generator          Do not include a generator credit.
  140  # --date, -d              Include the date at the end of the document (UTC).
  141  # --toc-top-backlinks     Enable backlinks from section headers to the top of
  142  #                         the table of contents.
  143  # --footnote-backlinks    Enable backlinks from footnotes and citations to their
  144  #                         references.  This is the default.
  145  # --section-numbering     Enable Docutils section numbering (default: enabled).
  146  # --tab-width=<width>     Set number of spaces for tab expansion (default 8).
  147  # --documentclass=DOCUMENTCLASS
  148  #                         Specify documentclass.  Default is "article".
  149  # --documentoptions=DOCUMENTOPTIONS
  150  #                         Specify document options.  Multiple options can be
  151  #                         given, separated by commas.  Default is
  152  #                         "10pt,a4paper".
  153  # --use-latex-footnotes   Use LaTeX footnotes. LaTeX supports only numbered
  154  #                         footnotes (does it?). Default: no, uses figures.
  155  # --use-latex-citations   Use LaTeX citations. Default: no, uses figures
  156  #                         which might get mixed with images. 
  157  # --footnote-references=<format>
  158  #                         Format for footnote references: one of "superscript"
  159  #                         or "brackets".  Default is "superscript".
  160  # --stylesheet=<file>     Specify a stylesheet file. The file will be "input" by
  161  #                         latex in the document header.  Default is no
  162  #                         stylesheet ("").  Overrides --stylesheet-path.
  163  # --use-verbatim-when-possible
  164  #                         When possibile, use verbatim for literal-blocks.
  165  #                         Default is to always use the mbox environment.
  166  # --table-style=<format>  Table style. "standard" with horizontal and vertical
  167  #                         lines, "booktabs" (LaTeX booktabs style) only
  168  #                         horizontal lines above and below the table and below
  169  #                         the header or "nolines".  Default: "standard"
  170  # --font-encoding=FONT_ENCODING
  171  #                         LaTeX font encoding. Possible values are "T1", "OT1",
  172  #                         "" or some other fontenc option. The font encoding
  173  #                         influences available symbols, e.g. "<<" as one
  174  #                         character. Default is "" which leads to package "ae"
  175  #                         (a T1 emulation using CM fonts).
  176  ##rst2latex --language=en --report=4 --use-latex-footnotes --section-numbering \
  177  ##  --section-numbering ${STYLESHEET} --use-verbatim-when-possible \
  178  ##  --graphicx-option=pdftex --font-encoding=T1 \
  179  ##  ${DOCSBASENAME}.txt ${DOCSBASENAME}.tex
  180  rst2latex --language=en --report=4 --use-latex-citations --footnote-backlinks   --section-numbering ${STYLESHEET} --use-verbatim-when-possible   --graphicx-option=pdftex --font-encoding=T1   ${DOCSBASENAME}.txt ${DOCSBASENAME}.tex
  181  tolistings.awk ${DOCSBASENAME}.tex > pp.tex
  182  mv pp.tex ${DOCSBASENAME}.tex
  183  pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex
  184  while grep 'Rerun to get' ${DOCSBASENAME}.log > /dev/null; do     pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex; done
  185  pdflatex -src-specials -file-line-error-style ${DOCSBASENAME}.tex
  186  rm -f CHG* CONTCAR* DOSCAR* DYNMAT EIGENVAL IBZKPT OPTIC OSZICAR* OUTCAR* PROCAR*       PCDAT W* XDATCAR* PARCHG* vasprun.xml SUMMARY.* REPORT       wannier90.win wannier90_band.gnu wannier90_band.kpt wannier90.chk wannier90.wout       *.dat plotfile p4vasp.log       *.e[0-9]* *.o[0-9]* *.pe[0-9]* *.po[0-9]* *.err *.out 
  187  #!/bin/bash
  188  PROG=WCHPC
  189  NAME=`ls  *.in`
  190  for M in $NAME ; do file=`pwd`
  191  cat > $M.pbs << EOF
  192  #!/bin/bash
  193  #PBS -P $PROG
  194  #PBS -N $M
  195  #PBS -l select=1:ncpus=24:mpiprocs=24
  196  #PBS -l walltime=04:00:00
  197  #PBS -q smp
  198  #PBS -m be
  199  #PBS -M "enteryouremailaddress"
  200  #PBS -r n
  201  #PBS -o $file/${M}_output
  202  #PBS -e $file/${M}_error
  203  #PBS
  204  module purge
  205  module add chpc/qespresso/6.7/parallel_studio/2020u1
  206  export QESPRESSO=/apps/chpc/chem/qespresso/6.7
  207  ulimit -s unlimited
  208  pushd $file
  209  lfs setstripe -d $file
  210  lfs setstripe -c 12 ./
  211  exe=\$QESPRESSO/bin/pw.x
  212  mpirun -np 24 \$exe -inp $M.in > $M.out
  213  popd
  214  EOF
  215    done
  216  #!/bin/bash --login
  217  #SBATCH --exclusive              # exclusive node access
  218  #SBATCH -p htc                   # selected queue
  219  #SBATCH --output=%J.o
  220  #SBATCH --error=%J.e
  221  #SBATCH --ntasks-per-node=1     # tasks to run per node
  222  #SBATCH --ntasks=1              # number of parallel processes (tasks)
  223  #SBATCH --time=02:00:00          # time limit
  224  #SBATCH -J Louise
  225  #SBATCH --mail-type=ALL
  226  #SBATCH --mail-user=bothal@cardiff.ac.uk
  227   
  228   
  229  ## Usage
  230  #      sbatch script        # submit job
  231  #      squeue               # job status
  232   
  233  # load the vasp module, it loads required compiler, mpi and mkl libraries
  234     module purge
  235     module load raven
  236     module load gulp/4.2.0
  237     export OMP_NUM_THREADS=1
  238     export I_MPI_ADJUST_ALLTOALLV=2
  239  # submit job from example VASP directory - change for your system
  240     MYPATH=$SLURM_SUBMIT_DIR
  241     NNODES=$SLURM_NNODES
  242     NCPUS=$SLURM_NTASKS
  243     PPN=$SLURM_NTASKS_PER_NODE
  244  # directory to run the job using /scratch/$USER
  245     WDPATH=/scratch/$USER/$SLURM_JOBID
  246     rm -rf ${WDPATH} ; mkdir -p ${WDPATH}
  247   
  248     echo Running on host `hostname`
  249     echo Time is `date`
  250     echo Directory is `pwd`
  251     echo SLURM job ID is $SLURM_JOBID
  252     echo This jobs runs on the following machine: `echo $SLURM_JOB_NODELIST | uniq`
  253     echo Number of Processing Elements is $NCPUS
  254     echo Number of mpiprocs per node is $PPN
  255  # ... and change into this directory
  256     cd ${WDPATH}; env
  257  # copy input data sets to work area
  258     cp $MYPATH/* .
  259  # Run the parallel program and once finished copy required files and delete the unnecesary ones
  260     echo VASP Start Time is `date` running NCPUs=$NCPUS PPN=$PPN
  261     start="$(date +%s)"
  262     time mpirun gulp < c00001.gin > gulp_output
  263  # Copy output data to home
  264     mv ${WDPATH}/* ${MYPATH}/
  265     rm -rf ${WDPATH}
  266  # Record Total time for the job
  267     stop="$(date +%s)"
  268     finish=$(( $stop-$start ))
  269     echo VASP $SLURM_JOBID  Job-Time  $finish seconds
  270  ls
  271  exit
  272  ls
  273  cd ..
  274  cd ..
  275  cd ..
  276  cd D
  277  cd ..
  278  cd D://
  279  cd D
  280  ls
  281  cd ..
  282  pwd
  283  cd usr/
  284  ls
  285  cd etc/
  286  ls
  287  cd profile.d/
  288  ls
  289  cd ..
  290  sl
  291  cd ..
  292  cd ..
  293  ls
  294  cd exit
  295  exit
  296  C:\Users\Louise\csss2024_day1\day3
  297  cd C:\Users\Louise\csss2024_day1\day3
  298  ls
  299  ll
  300  ls * 
  301  cd C:\Users\Louise\csss2024_day1\day3
  302  pwd
  303  ll
  304  cd ..
  305  ls
  306  cd day3/
  307  ll
  308  echo "fuck"
  309  echo "Yes you are fucked, shit out of luck, this world will be mine and mu cock you will suck"
  310  echo 'groovy'
  311  echo $((10+10))
  312  x = 5
  313  x=5
  314  y=10
  315  sum=$((x+y))
  316  echo sum
  317  echo $((sum))
  318  x=1
  319  echo $((sum)
  320  echo $((sum))
  321  echo $((x))
  322  echo $((y))
  323  echo $((sum))
  324  ls -lh
  325  ll
  326  pwd
  327  ll
  328  ls -hl
  329  clead
  330  clear
  331  ll
  332  ls-lh
  333  ls -lh
  334  ls *
  335  ls -lR
  336  ls
  337  clear
  338  ls ..
  339  ls ~
  340  clear
  341  ls ..
  342  ls ..day3/
  343  ls day3/
  344  ls ../day2
  345  ls ../day2/
  346  ls
  347  ls ../..
  348  ls ../
  349  ls ../day2/
  350  ls
  351  cd ..
  352  ls
  353  cd day2/
  354  ls
  355  cd day2/
  356  ls
  357  cd ..
  358  ls
  359  cd ..
  360  ls
  361  mkdir day4/
  362  ls
  363  cd day4/
  364  ls
  365  nano lol.txt
  366  ls
  367  more lol.txt 
  368  lol.txt
  369  cat lol.txt
  370  ls
  371  rm lol.txt
  372  ls
  373  ls
  374  mkdir Otaku_piece
  375  ls
  376  rm -r Otaku_piece/
  377  ls
  378  mkdir FuckThisDhit
  379  ls
  380  cd FuckThisDhit/
  381  ls
  382  nano ass.tst
  383  ls
  384  nano ass.txt
  385  ls
  386  cat ass.txt 
  387  show ass.txt 
  388  ls
  389  touch fuckthisshit.txt
  390  ls
  391  nano fuckthisshit.txt 
  392  cat fuckthisshit.txt 
  393  ls
  394  exit
  395  ls
  396  cd ..
  397  ls
  398  cd day4/
  399  ls
  400  cd FuckThisDhit/
  401  ls
  402  find ass.txt 
  403  cd ..
  404  find ass.txt
  405  ls
  406  cd FuckThisDhit/
  407  ls
  408  echo "Fuck"
  409  cat "example text" > file.txt
  410  touch example.txt
  411  touch file,txt
  412  cat "example text" > file.txt
  413  ls
  414  touch "example text" > file.txt
  415  ls
  416  ll
  417  ls
  418  cat file.txt
  419  ls
  420  rm file.txt
  421  ls
  422  rm fuckthisshit.txt 
  423  ls
  424  rm example
  425  rm example*
  426  ls
  427  rm file,txt 
  428  ls
  429  rm ass.txt ass.txt 
  430  rm ass.txt 
  431  ls
  432  echo 'ahhh' > fck.txt
  433  ls
  434  cat fck.txt 
  435  ls
  436  touch day1.txt day2.txt
  437  ls
  438  fine -name 'day'
  439  find -name 'day'
  440  find -name 'day*'
  441  echo $((x+1))
  442  echo $((sum+1))
  443  echo $((x=1))
  444  echo $((sum+1))
  445  echo $((sum+x))
  446  echo $((y=10))
  447  echo $((sum=y+20))
  448  clear
  449  ls
  450  cat day1.txt day2.txt 
  451  ls
  452  cat day1.txt day2.txt > day3.txt
  453  cat day3.txt 
  454  clear
  455  history > history.txt
